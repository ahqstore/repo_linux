{"appId":"humer.uvc_camera","appShortcutName":"UVC Camera / Usb Camera custom","appDisplayName":"UVC Camera / Usb Camera custom","authorId":"fdroid","releaseTagName":"","downloadUrls":{"1":{"installerType":"AndroidApkZip","asset":"","url":"https://github.com/Peter Stoiber/https://github.com/Peter-St/Android-UVC-Camera/releases/download//"}},"install":{"win32":null,"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":{"assetId":1,"min_sdk":15,"abi":["Aarch64","Armv7","X86","X64"]}},"displayImages":[],"description":"App for using a video camera over usb from userspace.\nAndroid-UVC-Camera\n\nThe app connects to a usb camera from your Android Device. (OTG cabel or OTG Hub needed)\n\nThis Project was built to perform an Isochronous Video Stream for all Android Devices (Above 4.1 Ice Cream Sandwich)(Mediathek Devices too) with UVC Cameras.\nThe program uses your userspacr usb device driver to perform an isochronous transfer with your camera device.\n\nFollow this way to set up your own userspace device driver:\n\nFirst you have to set up all camera settings for your device. The program then saves the values and you can restore them later or overwrite them with other values. Use the \"Edit/Save/Restore\" Button to adjust the values.\nUse the automatic camera serarch to find and set up the camera.\nExplaination:\n\nWhen the automatic search succeeds, you first set up the MAXIMAL PACKET SIZE. If your device is a mediathek device, you may have to lower the value for the max packet size.\nThe Value PACKETS PER REQUEST defines the Number of the Packets sended to the device: One packet has a size of 3000 bytes and you use 16 packets at one time for sending. Here you define the amount of Bytes which were sent.\nNext thing are the USB REQUEST BLOCKS (activeUrb): These are in relation to the max packet size. You have to find here the right values for your device and control the output on the screen under the menupoint \"Isoread\".\nSome typically values for Qualcom Devices are: 8 for the activeUrbs and 16 Packets per Request....\nThe first thing of the method Isoread is a Controltransfer to the camera device:\n\nIf the controlltransfer is successful, than you are ready to go.\n\nNext take a look at the frames.\n\nWhen you receive identically and long frames, you can proceed to the method Isostream, where the frames were displayed on your screen.\n\nTo know how big be a Frame should be, you can look at the output of the controll transfer of the camera in the log: maxVideoFrameSize, This value is returned from the camera and should be the valid frame size (The value is calculated by Imagewidth x Imagehight x 2).\n\nThe IsochronousRead1 class shows you how the frames are structered by the camera. Different camerasetting == Different Frame structers. Try it out with different setting and look at the output. The eof hint shows the framesize in the log. For valid camera settings the size should be the same as maxFrameSize value of the controlltransfer.\n\nOutput method Isoread: (Controltransfer) Thirst the program will send a controlltransfer to your camera device. The output of it looks as following: Initial streaming parms: hint=0x0 format=1 frame=1 frameInterval=2000000 keyFrameRate=0 pFrameRate=0 compQuality=0 compWindowSize=0 delay=0 maxVideoFrameSize=0 maxPayloadTransferSize=0 Probed streaming parms: hint=0x0 format=1 frame=1 frameInterval=2000000 keyFrameRate=0 pFrameRate=0 compQuality=0 compWindowSize=0 delay=0 maxVideoFrameSize=614400 maxPayloadTransferSize=3000 Final streaming parms: hint=0x0 format=1 frame=1 frameInterval=2000000 keyFrameRate=0 pFrameRate=0 compQuality=0 compWindowSize=0 delay=0 maxVideoFrameSize=614400 maxPayloadTransferSize=3000 The first line are the values you set in the program, to connect the camera. (Initial streaming parms}\n\nThe secound line are the values from the camera, which the camera returned from your values.\n\nAnd in the third line are the new saved and final values from the usb camera.\n\nOutpuf from the first Method: isoRead:\n\nEOF frameLen=10436. --> For Example here a frame ends with a length of 10436 wich is not 614400 as we expected from the controltransfer, so you may have to change some values of you program to get a valid frame size.","repo":{"author":"Peter Stoiber","repo":"https://github.com/Peter-St/Android-UVC-Camera"},"version":"bb470f4c52f0cb980f5edc6f66cb8f96e1e0d0710116ad6fec76076bbe4e3655","site":null,"source":"https://github.com/Peter-St/Android-UVC-Camera","license_or_tos":"LGPL-2.1-only","resources":null,"verified":false}