{"appId":"com.quaap.audiometer","appShortcutName":"AudioMeter","appDisplayName":"AudioMeter","authorId":"fdroid","releaseTagName":"","downloadUrls":{"1":{"installerType":"AndroidApkZip","asset":"","url":"https://github.com/Unknown/https://github.com/quaap/AudioMeter/releases/download//"}},"install":{"win32":null,"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":{"assetId":1,"min_sdk":17,"abi":["Aarch64","Armv7","X86","X64"]}},"displayImages":[],"description":"A simple VU-style audio meter\nA simple VU-style audio meter.  You can choose from several formulas to allow\nthe meter to work in low- and high-noise level enviromnents.\n\nI noticed there was no audio meter in F-Droid, so I thought I'd build one.\n\nThe app offers a few ways to calculate the audio level to display:\n\n* dBFS: Decibels relative to Full Scale.\n* RMS: Root Mean Square. This is arguable the most correct, but it is a little insensitive at low volumes.\n* LogRMS: Natural log of RMS: My first attempt to even out the scale. It's a little too sensitive to noisy mics.\n* SqrtRMS: Squareroot of RMS: My second attempt to even out RMS: it seems to works best.\n* Max: Simply find the loudest bit of each sample. Most responsive, but will peg the scale on noisey places.\n* Avg: Simple average of the sound.","repo":{"author":"Unknown","repo":"https://github.com/quaap/AudioMeter"},"version":"fc9c949a707d7a670484c66524781b95d8509e37be9ea249ba63b24aeb6c2506","site":null,"source":"https://github.com/quaap/AudioMeter","license_or_tos":"GPL-3.0-or-later","resources":null,"verified":false}